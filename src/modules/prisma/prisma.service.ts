import { Injectable, OnModuleInit, OnModuleDestroy, Logger } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(PrismaService.name);

  constructor() {
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PERF-001: Connection Pool Configuration
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pool —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL
    const databaseUrl = process.env.DATABASE_URL || '';
    const hasParams = databaseUrl.includes('?');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã connection pool –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ URL
    const connectionParams = [
      'connection_limit=10',      // –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      'pool_timeout=20',          // –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: 20s
      'connect_timeout=10',       // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: 10s
      'socket_timeout=60',        // –¢–∞–π–º–∞—É—Ç socket: 60s
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ URL
    const needsParams = !databaseUrl.includes('connection_limit');
    const enhancedUrl = needsParams
      ? `${databaseUrl}${hasParams ? '&' : '?'}${connectionParams.join('&')}`
      : databaseUrl;

    super({
      datasources: {
        db: {
          url: enhancedUrl,
        },
      },
      log: isDevelopment 
        ? ['query', 'info', 'warn', 'error']
        : ['error'],
    });
    
    if (needsParams) {
      this.logger.log('‚úÖ Connection pool configured: limit=10, pool_timeout=20s, connect_timeout=10s');
    }
  }

  async onModuleInit() {
    try {
      await this.$connect();
      this.logger.log('‚úÖ Database connected successfully');
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      this.setupQueryPerformanceMonitoring();
    } catch (error) {
      this.logger.error('‚ùå Failed to connect to database', error);
      throw error;
    }
  }

  /**
   * ‚úÖ –ù–û–í–û–ï: Query Performance Monitoring
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private setupQueryPerformanceMonitoring(): void {
    this.$use(async (params, next) => {
      const startTime = Date.now();
      
      try {
        const result = await next(params);
        const duration = Date.now() - startTime;
        
        // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        const SLOW_QUERY_THRESHOLD = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
        const WARNING_THRESHOLD = 500;     // 500 –º—Å
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (duration > SLOW_QUERY_THRESHOLD) {
          this.logger.error(
            `üêå SLOW QUERY DETECTED: ${params.model}.${params.action} took ${duration}ms`,
            JSON.stringify({
              model: params.model,
              action: params.action,
              duration,
              args: params.args,
              timestamp: new Date().toISOString(),
            }, null, 2)
          );
        } else if (duration > WARNING_THRESHOLD) {
          this.logger.warn(
            `‚ö†Ô∏è Slow query: ${params.model}.${params.action} took ${duration}ms`
          );
        } else if (process.env.NODE_ENV === 'development') {
          // –í dev —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          this.logger.debug(
            `Query: ${params.model}.${params.action} - ${duration}ms`
          );
        }
        
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus –¥–ª—è –º–µ—Ç—Ä–∏–∫
        // prometheusService.recordQueryDuration(params.model, params.action, duration);
        
        return result;
      } catch (error) {
        const duration = Date.now() - startTime;
        this.logger.error(
          `‚ùå Query failed: ${params.model}.${params.action} after ${duration}ms`,
          error
        );
        throw error;
      }
    });
    
    this.logger.log('‚úÖ Query performance monitoring enabled');
  }

  async onModuleDestroy() {
    await this.$disconnect();
    this.logger.log('Database disconnected');
  }
}

